package sk.tuke.gamestudio_backend.service.other;

import sk.tuke.gamestudio_backend.service.exceptions.ScoreException;
import sk.tuke.gamestudio_backend.service.interfaces.ScoreService;
import sk.tuke.gamestudio_backend.databaseJDBC.DBConnection;
import sk.tuke.gamestudio_backend.entity.Score;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;





public class ScoreServiceJDBC implements ScoreService {
    public static final String SELECT = "SELECT game, player, points, playedOn FROM scores WHERE game = ? ORDER BY points DESC LIMIT 10";
    public static final String DELETE = "DELETE FROM scores";
    public static final String TRUNCATE = "TRUNCATE TABLE scores RESTART IDENTITY";
    public static final String INSERT = "INSERT INTO scores (game, player, points, playedOn) VALUES (?, ?, ?, ?)";
    public static final String CREATE = """
                CREATE TABLE IF NOT EXISTS scores (
                id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                game VARCHAR(50) NOT NULL,
                player VARCHAR(50) NOT NULL,
                points INT,
                playedOn TIMESTAMP
            );
            """;

    public static ScoreService getInstance() {
        return new ScoreServiceJDBC();
    }

    public void createScoreTable() throws ScoreException {
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(CREATE)
        ) {
            statement.executeUpdate();
        } catch (SQLException e) {
            throw new ScoreException("Problem creating table", e);
        }
    }

    @Override
    public void addScore(Score score) throws ScoreException {
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(INSERT)
        ) {
            statement.setString(1, score.getGame());
            statement.setString(2, score.getPlayer());
            statement.setInt(3, score.getPoints());
            statement.setTimestamp(4, new Timestamp(score.getPlayedOn().getTime()));
            statement.executeUpdate();
        } catch (SQLException e) {
            throw new ScoreException("Problem inserting score", e);
        }
    }

    @Override
    public List<Score> getTopScores(String game) throws ScoreException {
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(SELECT);
        ) {
            statement.setString(1, game);
            try (ResultSet rs = statement.executeQuery()) {
                List<Score> scores = new ArrayList<>();
                while (rs.next()) {
                    scores.add(new Score(rs.getString(1), rs.getString(2), rs.getInt(3), rs.getTimestamp(4)));
                }
                return scores;
            }
        } catch (SQLException e) {
            throw new ScoreException("Problem selecting score", e);
        }
    }

    @Override
    public void reset() throws ScoreException {
        try (Connection connection = DBConnection.getConnection();
             Statement statement = connection.createStatement();
        ) {
            statement.executeUpdate(TRUNCATE);
        } catch (SQLException e) {
            throw new ScoreException("Problem deleting score", e);
        }
    }

    @Override
    public Score getScoreById(Long id) throws ScoreException {
        return null;
    }


}
