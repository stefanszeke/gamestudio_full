package sk.tuke.gamestudio_backend.service.other;

import sk.tuke.gamestudio_backend.service.exceptions.RatingException;
import sk.tuke.gamestudio_backend.service.interfaces.RatingService;
import sk.tuke.gamestudio_backend.databaseJDBC.DBConnection;
import sk.tuke.gamestudio_backend.entity.Rating;

import java.sql.*;


public class RatingServiceJDBC implements RatingService {
    private static final String INSERT = "INSERT INTO ratings (player, game, rating, ratedOn) VALUES (?, ?, ?, ?)";
    private static final String UPDATE = "UPDATE ratings SET rating = ?, ratedOn = ?  WHERE game = ? and player = ?";
    private static final String SELECT = "SELECT rating FROM ratings WHERE game = ? and player = ?";
    private static final String SELECTAVG = "SELECT AVG(rating) FROM ratings WHERE game = ?";
    private static final String RESET = "TRUNCATE TABLE ratings RESTART IDENTITY";
    private static final String CREATE = """
                CREATE TABLE IF NOT EXISTS ratings (
                id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                player VARCHAR(50) NOT NULL,
                game VARCHAR(50) NOT NULL,
                rating INT NOT NULL,
                ratedOn TIMESTAMP
            );
            """;

    public void createRatingTable() {
        try(Connection connection = DBConnection.getConnection();
            Statement statement = connection.createStatement()) {

            statement.executeUpdate(CREATE);

        } catch (SQLException e) { throw new RatingException("cant create ratings table"); }
    }

    @Override
    public void setRating(Rating rating) throws RatingException {
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(SELECT)) {

            preparedStatement.setString(1, rating.getGame());
            preparedStatement.setString(2, rating.getPlayer());

            try (ResultSet rs = preparedStatement.executeQuery()) {
                if (rs.next()) {
                    updateRating(rating);
                } else {
                    insertRating(rating);
                }
            }
        } catch (SQLException e) { throw new RatingException("cant rate"); }
    }

    public void updateRating(Rating rating) throws RatingException {
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(UPDATE)) {

            preparedStatement.setInt(1, rating.getRating());
            preparedStatement.setTimestamp(2, rating.getRatedOn());
            preparedStatement.setString(3, rating.getGame());
            preparedStatement.setString(4, rating.getPlayer());
            preparedStatement.executeUpdate();

        } catch (SQLException e) { throw new RatingException("cant update rating"); }
    }

    public void insertRating(Rating rating) throws RatingException {
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(INSERT)) {

            preparedStatement.setString(1, rating.getPlayer());
            preparedStatement.setString(2, rating.getGame());
            preparedStatement.setInt(3, rating.getRating());
            preparedStatement.setTimestamp(4, rating.getRatedOn());
            preparedStatement.executeUpdate();

        } catch (SQLException e) { throw new RatingException("cant insert rating"); }
    }

    @Override
    public int getAverageRating(String game) throws RatingException {
        try(Connection connection = DBConnection.getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement(SELECTAVG)) {

            preparedStatement.setString(1,game);
            try (ResultSet rs = preparedStatement.executeQuery()) {
                int averageRating = -1;
                while (rs.next()) {
                    averageRating = rs.getInt(1);
                }
                return averageRating;
            }

        } catch (SQLException e) { throw new RatingException("cant get average rating"); }
    }
    @Override
    public int getRating(String game, String player) throws RatingException {
        try(Connection connection = DBConnection.getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement(SELECT)) {

            preparedStatement.setString(1,game);
            preparedStatement.setString(2,player);
            try (ResultSet rs = preparedStatement.executeQuery()) {
                int rating = -1;

                while (rs.next()) {
                    rating = rs.getInt(1);
                }
                return rating;
            }

        } catch (SQLException e) { throw new RatingException("cant get rating"); }
    }

    @Override
    public void reset() throws RatingException {
        try(Connection connection = DBConnection.getConnection();
            Statement statement = connection.createStatement()) {

            statement.executeUpdate(RESET);

        } catch (SQLException e) { throw new RatingException("cant reset rating"); }
    }
}
